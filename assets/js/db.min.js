"use strict";

function _toConsumableArray(arr) {
    return (
        _arrayWithoutHoles(arr) ||
        _iterableToArray(arr) ||
        _unsupportedIterableToArray(arr) ||
        _nonIterableSpread()
    );
}

function _nonIterableSpread() {
    throw new TypeError(
        "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
    if (
        (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null) ||
        iter["@@iterator"] != null
    )
        return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
}

var WP_DOUBAN = /*#__PURE__*/ (function () {
    function WP_DOUBAN() {
        _classCallCheck(this, WP_DOUBAN);

        this.type = "movie";
        this.finished = false;
        this.paged = 1;
        this.genre = "";
        this.subjects = [];

        this._create();
    }

    _createClass(WP_DOUBAN, [
        {
            key: "on",
            value: function on(t, e, n) {
                var a = document.querySelectorAll(e);
                a.forEach(function (item) {
                    item.addEventListener(t, n);
                });
            },
        },
        {
            key: "_fetchGenres",
            value: function _fetchGenres() {
                var _this = this;

                fetch(wpd_base.api + "v1/movie/genres")
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (t) {
                        // @ts-ignore
                        if (t.length) {
                            document.querySelector(".db--genres").innerHTML = t
                                .map(function (item) {
                                    return '<span class="db--genreItem">'.concat(
                                        item.name,
                                        "</span>"
                                    );
                                })
                                .join("");

                            _this._handleGenreClick();
                        }
                    });
            },
        },
        {
            key: "_handleGenreClick",
            value: function _handleGenreClick() {
                var _this2 = this;

                this.on("click", ".db--genreItem", function (t) {
                    if (t.target.classList.contains("is-active")) return;
                    document.querySelector(".db--list").innerHTML = "";
                    document
                        .querySelector(".lds-ripple")
                        .classList.remove("u-hide");
                    if (document.querySelector(".db--genreItem.is-active"))
                        document
                            .querySelector(".db--genreItem.is-active")
                            .classList.remove("is-active");
                    var self = t.target;
                    self.classList.add("is-active");
                    _this2.genre = self.innerText;
                    _this2.paged = 1;
                    _this2.finished = false;
                    _this2.subjects = [];

                    _this2._fetchData();
                });
            },
        },
        {
            key: "_fetchData",
            value: function _fetchData() {
                var _this3 = this;

                fetch(
                    wpd_base.api +
                        "v1/movies?type=" +
                        this.type +
                        "&paged=" +
                        this.paged +
                        "&genre=" +
                        this.genre
                )
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (t) {
                        // @ts-ignore
                        if (t.length) {
                            if (
                                document
                                    .querySelector(".db--list")
                                    .classList.contains("db--list__card")
                            ) {
                                _this3.subjects = [].concat(
                                    _toConsumableArray(_this3.subjects),
                                    _toConsumableArray(t)
                                );

                                _this3._randerDateTemplate();
                            } else {
                                _this3.subjects = [].concat(
                                    _toConsumableArray(_this3.subjects),
                                    _toConsumableArray(t)
                                );

                                _this3._randerListTemplate();
                            }

                            document
                                .querySelector(".lds-ripple")
                                .classList.add("u-hide");
                        } else {
                            _this3.finished = true;
                            document
                                .querySelector(".lds-ripple")
                                .classList.add("u-hide");
                        }
                    });
            },
        },
        {
            key: "_randerDateTemplate",
            value: function _randerDateTemplate() {
                var result = this.subjects.reduce(function (result, item) {
                    if (
                        Object.prototype.hasOwnProperty.call(
                            result,
                            item.create_time
                        )
                    ) {
                        result[item.create_time].push(item);
                    } else {
                        result[item.create_time] = [item];
                    }

                    return result;
                }, {});
                var html = "";

                for (var key in result) {
                    var date = new Date(key);
                    html +=
                        '<div class="db--listBydate"><div class="db--titleDate JiEun">\n            <div class="db--titleDate__year">'
                            .concat(
                                date.getFullYear(),
                                '</div><div class="db--titleDate__day">'
                            )
                            .concat(
                                date.getDate().toString().padStart(2, "0"),
                                '</div><div class="db--titleDate__month">'
                            )
                            .concat(
                                date.toLocaleString("en-US", {
                                    month: "short",
                                }),
                                '</div></div><div class="db--dateList__card">'
                            );
                    html += result[key]
                        .map(function (movie) {
                            return '<div class="db--item">'
                                .concat(
                                    movie.is_top250
                                        ? '<span class="top250">Top 250</span>'
                                        : "",
                                    '<img src="'
                                )
                                .concat(
                                    movie.poster,
                                    '" referrerpolicy="no-referrer" class="db--image"><div class="db--score JiEun">'
                                )
                                .concat(
                                    movie.douban_score > 0
                                        ? '<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor" ><path d="M12 20.1l5.82 3.682c1.066.675 2.37-.322 2.09-1.584l-1.543-6.926 5.146-4.667c.94-.85.435-2.465-.799-2.567l-6.773-.602L13.29.89a1.38 1.38 0 0 0-2.581 0l-2.65 6.53-6.774.602C.052 8.126-.453 9.74.486 10.59l5.147 4.666-1.542 6.926c-.28 1.262 1.023 2.26 2.09 1.585L12 20.099z"></path></svg>' +
                                              movie.douban_score
                                        : ""
                                )
                                .concat(
                                    movie.year > 0 ? " Â· " + movie.year : "",
                                    '</div><div class="db--title"><a href="'
                                )
                                .concat(movie.link, '" target="_blank">')
                                .concat(
                                    movie.name,
                                    "</a></div>\n    \n    </div>"
                                );
                        })
                        .join("");
                    html += "</div></div>";
                }

                document.querySelector(".db--list").innerHTML = html;
            },
        },
        {
            key: "_randerListTemplate",
            value: function _randerListTemplate() {
                document.querySelector(".db--list").innerHTML = this.subjects
                    .map(function (item) {
                        return '<div class="db--item">'
                            .concat(
                                item.is_top250
                                    ? '<span class="top250">Top 250</span>'
                                    : "",
                                '<img src="'
                            )
                            .concat(
                                item.poster,
                                '" referrerpolicy="no-referrer" class="db--image"><div class="ipc-signpost JiEun">'
                            )
                            .concat(
                                item.create_time,
                                '</div><div class="db--score JiEun">'
                            )
                            .concat(
                                item.douban_score > 0
                                    ? '<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor" ><path d="M12 20.1l5.82 3.682c1.066.675 2.37-.322 2.09-1.584l-1.543-6.926 5.146-4.667c.94-.85.435-2.465-.799-2.567l-6.773-.602L13.29.89a1.38 1.38 0 0 0-2.581 0l-2.65 6.53-6.774.602C.052 8.126-.453 9.74.486 10.59l5.147 4.666-1.542 6.926c-.28 1.262 1.023 2.26 2.09 1.585L12 20.099z"></path></svg>' +
                                          item.douban_score
                                    : ""
                            )
                            .concat(
                                item.year > 0 ? " Â· " + item.year : "",
                                '</div><div class="db--title"><a href="'
                            )
                            .concat(item.link, '" target="_blank">')
                            .concat(
                                item.name,
                                "</a></div>\n                </div>\n                </div>"
                            );
                    })
                    .join("");
            },
        },
        {
            key: "_handleScroll",
            value: function _handleScroll() {
                var _this4 = this;

                window.addEventListener("scroll", function () {
                    var t = window.scrollY || window.pageYOffset; // @ts-ignore

                    if (
                        document.querySelector(".block-more").offsetTop + // @ts-ignore
                            -window.innerHeight <
                            t &&
                        document
                            .querySelector(".lds-ripple")
                            .classList.contains("u-hide") &&
                        !_this4.finished
                    ) {
                        document
                            .querySelector(".lds-ripple")
                            .classList.remove("u-hide");
                        _this4.paged++;

                        _this4._fetchData();
                    }
                });
            },
        },
        {
            key: "_handleNavClick",
            value: function _handleNavClick() {
                var _this5 = this;

                this.on("click", ".db--navItem", function (t) {
                    if (t.target.classList.contains("current")) return;
                    _this5.genre = "";
                    _this5.type = t.target.dataset.type;

                    if (_this5.type == "movie") {
                        document
                            .querySelector(".db--genres")
                            .classList.remove("u-hide");
                    } else {
                        document
                            .querySelector(".db--genres")
                            .classList.add("u-hide");
                    }

                    document.querySelector(".db--list").innerHTML = "";
                    document
                        .querySelector(".lds-ripple")
                        .classList.remove("u-hide");
                    document
                        .querySelector(".db--navItem.current")
                        .classList.remove("current");
                    var self = t.target;
                    self.classList.add("current");
                    _this5.paged = 1;
                    _this5.finished = false;
                    _this5.subjects = [];

                    _this5._fetchData();
                });
            },
        },
        {
            key: "_create",
            value: function _create() {
                var _this6 = this;

                if (document.querySelector(".db--container")) {
                    if (document.querySelector(".db--navItem.current")) {
                        this.type = document.querySelector(
                            ".db--navItem.current"
                        ).dataset.type;
                    }

                    if (document.querySelector(".db--list").dataset.type)
                        this.type =
                            document.querySelector(".db--list").dataset.type;

                    if (this.type == "movie") {
                        document
                            .querySelector(".db--genres")
                            .classList.remove("u-hide");
                    }

                    this._fetchGenres();

                    this._fetchData();

                    this._handleScroll();

                    this._handleNavClick();
                }

                if (document.querySelector(".db--collection")) {
                    document
                        .querySelectorAll(".db--collection")
                        .forEach(function (item) {
                            _this6._fetchCollection(item);
                        });
                }
            },
        },
        {
            key: "_fetchCollection",
            value: function _fetchCollection(item) {
                var type = item.dataset.style ? item.dataset.style : "card";
                fetch(
                    wpd_base.api +
                        "v1/movies?type=" +
                        item.dataset.type +
                        "&paged=1&genre=&start_time=" +
                        item.dataset.start +
                        "&end_time=" +
                        item.dataset.end
                )
                    .then(function (response) {
                        return response.json();
                    })
                    .then(function (t) {
                        // @ts-ignore
                        if (t.length) {
                            if (type == "card") {
                                item.innerHTML += t
                                    .map(function (movie) {
                                        return '<div class="doulist-item">\n                            <div class="doulist-subject">\n                            <div class="db--viewTime JiEun">Marked '
                                            .concat(
                                                movie.create_time,
                                                '</div>\n                            <div class="doulist-post"><img referrerpolicy="no-referrer" src="'
                                            )
                                            .concat(
                                                movie.poster,
                                                '"></div><div class="doulist-content"><div class="doulist-title"><a href="'
                                            )
                                            .concat(
                                                movie.link,
                                                '" class="cute" target="_blank" rel="external nofollow">'
                                            )
                                            .concat(
                                                movie.name,
                                                '</a></div><div class="rating"><span class="allstardark"><span class="allstarlight" style="width:75%"></span></span><span class="rating_nums">'
                                            )
                                            .concat(
                                                movie.douban_score,
                                                '</span></div><div class="abstract">'
                                            )
                                            .concat(
                                                movie.remark ||
                                                    movie.card_subtitle,
                                                "</div></div></div></div>"
                                            );
                                    })
                                    .join("");
                            } else {
                                var result = t.reduce(function (result, item) {
                                    if (
                                        Object.prototype.hasOwnProperty.call(
                                            result,
                                            item.create_time
                                        )
                                    ) {
                                        result[item.create_time].push(item);
                                    } else {
                                        result[item.create_time] = [item];
                                    }

                                    return result;
                                }, {});
                                var html = "";

                                for (var key in result) {
                                    html += '<div class="db--date">'.concat(
                                        key,
                                        '</div><div class="db--dateList">'
                                    );
                                    html += result[key]
                                        .map(function (movie) {
                                            return '<div class="db--card__list"">\n                                    <img referrerpolicy="no-referrer" src="'
                                                .concat(
                                                    movie.poster,
                                                    '">\n                                    <div>\n                                    <div class="title"><a href="'
                                                )
                                                .concat(
                                                    movie.link,
                                                    '" class="cute" target="_blank" rel="external nofollow">'
                                                )
                                                .concat(
                                                    movie.name,
                                                    '</a></div>\n                                    <div class="rating"><span class="allstardark"><span class="allstarlight" style="width:75%"></span></span><span class="rating_nums">'
                                                )
                                                .concat(
                                                    movie.douban_score,
                                                    "</span></div>\n                                    "
                                                )
                                                .concat(
                                                    movie.remark ||
                                                        movie.card_subtitle,
                                                    "\n                                    </div>\n                                    </div>"
                                                );
                                        })
                                        .join("");
                                    html += "</div>";
                                }

                                item.innerHTML = html;
                            }
                        }
                    });
            },
        },
    ]);

    return WP_DOUBAN;
})();

new WP_DOUBAN();
